{
    "version": "https://jsonfeed.org/version/1",
    "title": "Reda Lemeden – Unredacted",
    "home_page_url": "https://redalemeden.com",
    "feed_url": "https://redalemeden.com/feed.json",
    "description": "Reda Lemeden's main blog",
    "icon": "https://redalemeden.com/icon-touch.png",
    "author": {
        "name": "Reda Lemeden"
    },
    "items": [
        {
            "id": "https://redalemeden.com/",
            "content_html": "<p>The JSON feed is no longer maintained. Please use the <a href=\"https://redalemeden.com/feed.xml\">RSS feed</a> instead.</p>",
            "url": "https://redalemeden.com/feed.xml",
            "title": "JSON Feed Deprecation Notice",
            "date_modified": "2024-01-25T20:49:00.000Z",
            "date_published": "2024-01-25T20:49:00.000Z",
            "author": {
                "name": "Reda Lemeden",
                "url": "https://redalemeden.com"
            }
        },
        {
            "id": "https://redalemeden.com/blog/2022/stable-diffusion-a-quick-tour",
            "content_html": "<p><em><strong>Assumed audience</strong>: people interested in machine learning or curious about its applications. <a href=\"https://redalemeden.com/microblog/post-1570576215962\">What's this?</a></em></p><p>In the past two weeks, something incredible happened in the machine learning space: an open-source image generation model that can compete or even outperform closed-source alternatives such as OpenAI’s DALL-E or Google’s Imagen has been <a href=\"https://stability.ai/blog/stable-diffusion-public-release\">released to the public</a>. This development generated—no pun intended—an unprecedented wave of excitement and buzz in the space. <a href=\"https://thealgorithmicbridge.substack.com/p/stable-diffusion-is-the-most-important\">You don’t have to take my word for it</a>.</p>\n<p>Developed by <a href=\"https://stability.ai\">Stability.Ai</a>, <a href=\"https://stability.ai/blog/stable-diffusion-announcement\">Stable Diffusion</a> can generate highly detailed images from simple text prompts. But the real novelty lies in the fact that it can do so on consumer-grade graphic cards. Prior to this, most <em>latent diffusion models</em>, as they are called, required much more powerful machines to do their work.</p>\n<p>To illustrate why this is a big deal, here is one of the images<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup> my 5 years old GTX 1080 graphics card generated for the prompt <em>“A photo of a panda sitting in a primary school classroom”</em>:</p>\n<p><img src=\"/static/b52c9f92b3cdb912e643ea5f29609725/3313248937.png\" alt=\"A generated image of a panda sitting in a primary school classroom\"> <em>“A photo of a panda sitting in a primary school classroom”</em></p>\n<p>The model managed to capture the meaning of the prompt and even nailed the focus blur for that perfect photograph feel. The fascinating part, is that even small variations in the prompt or the parameters produce widely different results. For instance, consider the following prompt-output combination.</p>\n<p><em>“A painting by Katsushika Hokusai of a panda sitting in a primary school classroom”</em>\n<img src=\"/static/0185d58a43f20454cbda21c91e32677c/3345077563.png\" alt=\"A generated image of a painting by Katsushika Hokusai of a panda sitting in a primary school classroom\"> <em>“A painting by Katsushika Hokusai of a panda sitting in a primary school classroom”</em></p>\n<p>Not only the model recognized and reproduced the style of the famous Japanese artist, but it managed to do so while capturing the historical context by eliminating all modern details from the image. If we try with a completely different prompt that purposefully include words like “cyberpunk” and “futuristic”, it still does its best to stay faithful to the aesthetics of the <a href=\"https://en.wikipedia.org/wiki/Ukiyo-e\">Ukiyo-e</a> art form.</p>\n<p><em>“A painting by Katsushika Hokusai of a cyberpunk futuristic city”</em>\n<img src=\"/static/612b6352b9e205cf49948bf7dc418920/3183093862.png\" alt=\"A generated image of a painting by Katsushika Hokusai of a cyberpunk futuristic city\"> <em>A painting by Katsushika Hokusai of a cyberpunk futuristic city</em></p>\n<p>But the use cases of Stable Diffusion don’t stop here. It can generate images based on other images (<em>image-to-image</em>), fill empty pixels inside an image (<em>inpainting</em>), fill empty pixels outside an image (<em>outpainting</em>), interpolate between images, and so forth. These building blocks open the door to large swaths of applications in more than one creative field.</p>\n<p>Image-to-image generation is particularly powerful as it allows the user to have a much bigger say in the final output, eliminating the guesswork and making the prompt writing process much easier. To illustrate, consider this example below where I started with a crude manual drawing to the left, added the prompt <em>“a rainbow-colored umbrella”</em>, and ended with the generated image to the right (granted after a half a dozen tries).</p>\n<p><img src=\"/static/7ca15ed4eb6fb0e98e9a8e2a4109db40/umbrellas.png\" alt=\"Umbrellas\"> <em>Left: input image. Right: Image generated by Stable Diffusion.</em></p>\n<h2 id=\"how-to-get-started\" style=\"position:relative;\"><a href=\"#how-to-get-started\" aria-label=\"how to get started permalink\" class=\"anchor before\"># </a>How to Get Started</h2>\n<p>Being an open-source model, it took only a couple of weeks for a barrage of wrappers, forks, GUIs, and CLIs to emerge. Unfortunately, the tooling can still be arcane to most people, even developers not familiar with machine learning. There is a non-trivial amount of fiddling with python environments and other dependencies to get the intended results.</p>\n<p>The most straightforward way to take SD for a spin is via the official <a href=\"https://beta.dreamstudio.ai/dream\">DreamStudio</a> web-based interface. You get 200 credits when you create a new account, where each credit corresponds to one 512px by 512px image. Another option is via the <a href=\"https://discord.gg/stablediffusion\">official Discord server</a> which features a bot command that parses prompts and displays the generated images directly in the channel.</p>\n<p>If you’re familiar with Python tooling or just feeling adventurous, and have a computer with enough GPU juice to run the model<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>, <a href=\"https://github.com/lstein/stable-diffusion\">this fork</a> has more thorough setup instructions than many others I tried.</p>\n<h2 id=\"alternatives\" style=\"position:relative;\"><a href=\"#alternatives\" aria-label=\"alternatives permalink\" class=\"anchor before\"># </a>Alternatives</h2>\n<p>As it stands now, Stable Diffusion is the only open-source latent diffusion model around. Alternatives in the closed-source side of the fence include the buzz-worthy <a href=\"https://discord.me/yp2funhwwf\">Midjourney discord server</a>, which seems to excel at generating stunning artwork using very minimal prompts; something SD still needs a bit more help with in my tests using the v1.4 model weights.</p>\n<p><a href=\"https://openai.com/blog/dall-e-now-available-in-beta/\">DALL·E</a> is the other commercial alternative—albeit only for those who got access to the closed beta.</p>\n<h2 id=\"caveats\" style=\"position:relative;\"><a href=\"#caveats\" aria-label=\"caveats permalink\" class=\"anchor before\"># </a>Caveats</h2>\n<p>Generating images that are jaw-droppingly good takes a lot of iterations, prompt <em>engineering</em>, and parameter adjustments. It’s quite rare for the first image to match what you had in mind when you wrote the prompt. The model also seems to have trouble with human limbs and fingers, often drawing more or less than necessary. Anatomy in general seems to be a hit or miss. Another shortcoming is the often-incorrect interpretation of relations between various objects and actors in the prompt.</p>\n<p>That being said, It’s been only a couple of weeks, and these early limitations are already in the radar of the Stability Ai team and the community.</p>\n<p>The other aspect to consider is the ethical one. Using text-to-image to replicate the style of living artists without their permission is not only possible but on the way to become the norm. The model also is as biased as the data it was trained on. The good news is that SD can be retrained by anyone invested enough on more curated datasets to minimize these issues.</p>\n<h2 id=\"personal-thoughts\" style=\"position:relative;\"><a href=\"#personal-thoughts\" aria-label=\"personal thoughts permalink\" class=\"anchor before\"># </a>Personal Thoughts</h2>\n<p>Initially I was very skeptical of letting machines meddle with art, especially when they are developed by for-profit companies behind the curtains. But as the novelty started wearing off, I slowly realized that these tools aren’t meant to replace humans as many skeptics, including myself, tend to believe. For one, these models are far from perfect. The generated images are often distorted or comically incoherent. Even if these tools improve, they are never going to make art on their own or compete with humans when it matters.</p>\n<p>One analogy I heard that made a lot of sense is how photography never replaced artists as some were concerned about. Neither did printing before it. In the best case scenario, AI-generated “art” is going to be accepted as its own sub-field. In the worst case, this technology is going to be nothing more than yet another tool for people, artists included, to work with.</p>\n<p>As someone who always enjoyed drawing—and made a living from it at some point—using Stable Diffusion won’t stop me from reaching out to my pencil and sketchbook (or iPad these days). In fact, I’m already enjoying how it augmented my work by means of inspiration, quick experimentation, and fast turnaround. Taking my rough sketches and storyboards to the next level is all of a sudden much less time consuming than it ever was.</p>\n<p>Granted, this is a new frontier and it remains to be seen how things will evolve from here. I am relatively optimistic this time around.</p>\n<h2 id=\"learn-more\" style=\"position:relative;\"><a href=\"#learn-more\" aria-label=\"learn more permalink\" class=\"anchor before\"># </a>Learn More</h2>\n<p>Since the public release, it’s been hard to run out of resources, guides, and tools related to SD. And quite frankly, it’s overwhelming for someone new to machine learning like myself. But if you’re curious about the topic and would like to learn more, you might find <a href=\"/collections/stable-diffusion\">my growing collection of links</a> of some use!</p>\n<p>Last but not least, why bother with closing words when we can do closing images? Enjoy!</p>\n<p><em>“A Kawase Hasui painting of a UFO in the icy landscape of Antarctica”</em>\n<img src=\"/static/8bd5e90adbb2e2e0c9c500ca12967293/2870482490.png\" alt=\"A Kawase Hasui painting of a UFO in the icy landscape of Antarctica\"> <em>A Kawase Hasui painting of a UFO in the icy landscape of Antarctica</em></p>\n<p><em>“A kid’s drawing of the pyramids”</em>\n<img src=\"/static/6d3e67c0808247034fd1ab9afddbceed/2613985449.png\" alt=\"A kid’s drawing of the pyramids\"> <em>A kid’s drawing of the pyramids</em></p>\n<p><em>“An intricate painting of a cucumber, renaissance style”</em>\n<img src=\"/static/5fe651f0fc6c6837cbf727cff0d1079c/4716763.png\" alt=\"An intricate painting of a cucumber, renaissance style\"> <em>An intricate painting of a cucumber, renaissance style</em></p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">The others were far less coherent, but that’s par for the course in these kind of models.<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a></li>\n<li id=\"fn-2\">The model works best with Nvidia GPUs, but can work with AMD of even Apple’s M1 chips. At least 6Gb of VRAM is needed to generate images of 512px by 512px.<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a></li>\n</ol>\n</div>",
            "url": "https://redalemeden.com/blog/2022/stable-diffusion-a-quick-tour",
            "title": "Stable Diffusion: A Quick Tour",
            "date_modified": "2022-09-05T20:49:00.000Z",
            "date_published": "2022-09-05T20:49:00.000Z",
            "author": {
                "name": "Reda Lemeden",
                "url": "https://redalemeden.com"
            }
        },
        {
            "id": "https://redalemeden.com/blog/2022/ditching-docker-desktop-apple-silicon",
            "content_html": "<p><em><strong>Assumed audience</strong>: Docker and Apple silicon Mac users. <a href=\"https://redalemeden.com/microblog/post-1570576215962\">What's this?</a></em></p><p><img src=\"/static/f316500fc57fb0f1df8f8fed1b67d3db/header-image.jpg\" alt=\"Whale\"></p>\n<p>When I got my first M1 MacBook Pro last year and started setting it up, I decided to not bring over Docker Desktop.\nFor starters, the dashboard UI is wonky and had always put me off whenever I used it.\nPerformance was nothing to write home about either.\nBut the straw that broke the camel back so to speak was the licensing changes that denoted a clear shift in the company’s focus and target audience.</p>\n<p>Docker Desktop is collection of tools bundled in a single app: Engine, CLI, Compose, Build, Content Trust, Scan, Kubernetes, and Credential Helper. Lucky for me, my use case is relatively simple—I mostly rely on Docker to run half a dozen databases locally. This means that I only need a subset of features that Docker Desktop ships with.</p>\n<p>As I started looking for alternatives, I was pleasantly surprised by how vibrant the containerization space is—there is no shortage of options with different interfaces and levels of control. On the requirement front, I mostly focused on compatibility with <a href=\"https://docs.docker.com/compose/\"><code>docker-compose</code></a>. Here are some of the alternatives I came across:</p>\n<ul>\n<li>\n<p><a href=\"https://multipass.run\">Multipass</a>: Spins up an Ubuntu virtual machine using <a href=\"https://minikube.sigs.k8s.io/docs/drivers/hyperkit/\">HyperKit</a> (which in turn is built on top of the first-party <a href=\"https://developer.apple.com/documentation/hypervisor\">Hypervisor framework</a>). The folks at Ubuntu even introduced <a href=\"https://ubuntu.com/blog/docker-on-mac-and-windows-multipass\">a single-command workflow</a> for setting up a Docker environment on any machine, including macOS. For a more complete guide on how to set this up, check out <a href=\"https://www.mybyways.com/blog/multipass-for-docker-containers-on-macos\">this guide</a> by C.Y. Wong.</p>\n</li>\n<li>\n<p><a href=\"https://minikube.sigs.k8s.io/docs/start/\">Minikube</a>: The official way to run Kubernetes locally on macOS through the Hypervisor framework.  Supports Docker out of the box. The only gotcha is that you can’t use <code>docker-compose</code> and you need to migrate to Kubernetes manifest files.</p>\n</li>\n<li>\n<p><a href=\"https://podman.io\">Podman</a> via <a href=\"https://www.qemu.org\">QEMU</a>: A container engine compatible with <code>docker-compose</code> and other Docker APIs. Since it requires a virtual machine to run on top of on non-Linux OSes, you can set up <a href=\"https://docs.podman.io/en/latest/markdown/podman-machine.1.html\">podman-machine</a> to work via QEMU following <a href=\"https://blog.cloudassembler.com/post/podman-machine-mac-m1/\">this guide</a>. A bit too finicky for my taste, so I skipped trying this one out.</p>\n</li>\n<li>\n<p><a href=\"https://rancherdesktop.io\">Rancher Desktop</a>: A multi-platform electron app that takes care of running Kubernetes and Docker for you. Supports <code>docker-compose</code> .</p>\n</li>\n<li>\n<p><a href=\"https://github.com/lima-vm/lima\">Lima</a>: Spins up Linux VMs with automatic file sharing and port-forwarding. Uses <a href=\"https://containerd.io/\">containerd</a> as a container runtime. Runs on QEMU and Hypervisor like many other solutions above. To use it as replacement for Docker Desktop you need to follow some manual steps as <a href=\"https://naomiaro.hashnode.dev/replacing-docker-desktop-with-lima-on-mac-os\">this guide</a> outlines.</p>\n</li>\n<li>\n<p><a href=\"https://github.com/abiosoft/colima\">Colima</a>: Uses Lima under the hood, but forgoes the additional setup needed as it comes pre-configured for running Docker and optionally Kubernetes.</p>\n</li>\n<li>\n<p>And <a href=\"https://k3d.io/v5.4.1/\">many</a> <a href=\"https://kind.sigs.k8s.io\">others</a> that I didn’t bother looking into.</p>\n</li>\n</ul>\n<p>I tried most of the approaches above and landed on using Colima; by far the leanest and most hassle-free alternative for my use case.</p>\n<h2 id=\"setting-up-colima\" style=\"position:relative;\"><a href=\"#setting-up-colima\" aria-label=\"setting up colima permalink\" class=\"anchor before\"># </a>Setting up Colima</h2>\n<p>The README of the project should be more than enough, but here is a rundown of the steps I took to get it up and running.</p>\n<p>I first had to install Colima and other Docker components to get started.</p>\n<pre class=\"grvsc-container noctis-lux grvsc-ps-tCqlaq grvsc-mm-t9ljLd grvsc-ps-t9ljLd\" data-language=\"sh\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">brew install colima docker docker-compose</span></span></span></code></pre>\n<p>As part of the installation, Colima sets up shell completion, but there is also a dedicated command to do that later:</p>\n<pre class=\"grvsc-container noctis-lux grvsc-ps-tCqlaq grvsc-mm-t9ljLd grvsc-ps-t9ljLd\" data-language=\"sh\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">colima completion bash </span><span class=\"grvsc-tCqlaq-3 grvsc-tCqlaq-i grvsc-t9ljLd-3\">#fish, zsh, etc.</span></span></span></code></pre>\n<p>By default Colima seems to mount the entire user directory, but I’d rather mount specific folders instead. I had previously created a <code>~/Volumes</code>  folder that I use for various VM volume needs, so I mounted it as a read-write volume using the following command:</p>\n<pre class=\"grvsc-container noctis-lux grvsc-ps-tCqlaq grvsc-mm-t9ljLd grvsc-ps-t9ljLd\" data-language=\"sh\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">colima start --mount </span><span class=\"grvsc-tCqlaq-12 grvsc-tCqlaq-b grvsc-t9ljLd-7\">~</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">/Volumes:w</span></span></span></code></pre>\n<p>And that’s it!</p>\n<p>Now I have access to all the Docker CLI commands right from the macOS shell—Colima already took care of setting up the Docker daemons and forwarding the right ports to the host.</p>\n<pre class=\"grvsc-container noctis-lux grvsc-ps-tCqlaq grvsc-mm-t9ljLd grvsc-ps-t9ljLd\" data-language=\"sh\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">docker ps</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">docker-compose up -d</span></span></span></code></pre>\n<p>If your machine is resource constrained, you can temporarily stop the Colima VM by running <code>colima stop</code>. To start it again, just run the same <code>start</code> command above.</p>\n<p>I have used this setup for almost a year now and I am quite the happy camper.\nI sort of miss some aspects of the GUI dashboard, but they’re nothing a <a href=\"https://github.com/swiftbar/SwiftBar\">SwiftBar</a> plugin can’t solve—hopefully I can share more about that in a later post.</p>\n<p>Have you used any of the alternatives above? What was your experience? Don’t hesitate to chime in via <a href=\"https://mastodon.social/web/@redalemeden/108245594126322878\">Mastodon</a> or <a href=\"https://twitter.com/kaishin/status/1521951812986810371\">Twitter</a>!</p>\n<style class=\"grvsc-styles\">\n  \n  .noctis-lux {\n    background-color: #fef8ec;\n    color: #005661;\n  }\n  .noctis-lux .grvsc-tCqlaq-b { font-weight: bold; }\n  .noctis-lux .grvsc-tCqlaq-i { font-style: italic; }\n  .noctis-lux .grvsc-tCqlaq-8 { color: var(--theme-link-color); }\n  .noctis-lux .grvsc-tCqlaq-3 { color: #8CA6A6; }\n  .noctis-lux .grvsc-tCqlaq-12 { color: #FF5792; }\n  .noctis-lux .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(0, 0, 0, 0.05));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(0, 0, 0, 0.2));\n  }\n  body.light-theme .grvsc-ps-tCqlaq {\n    background-color: #fef8ec;\n    color: #005661;\n  }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-tCqlaq-b { font-weight: bold; }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-tCqlaq-i { font-style: italic; }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-tCqlaq-8 { color: var(--theme-link-color); }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-tCqlaq-3 { color: #8CA6A6; }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-tCqlaq-12 { color: #FF5792; }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(0, 0, 0, 0.05));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(0, 0, 0, 0.2));\n  }\n  body.dark-theme .grvsc-ps-t9ljLd { background-color: #000c18; }\n  body.dark-theme .grvsc-ps-t9ljLd .grvsc-t9ljLd-1 { color: #6688CC; }\n  body.dark-theme .grvsc-ps-t9ljLd .grvsc-t9ljLd-3 { color: #384887; }\n  body.dark-theme .grvsc-ps-t9ljLd .grvsc-t9ljLd-7 { color: #225588; }\n  body.dark-theme .grvsc-ps-t9ljLd .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n  \n  /* Abyss */\n  @media (prefers-color-scheme: dark) {\n    .grvsc-mm-t9ljLd { background-color: #000c18; }\n    .grvsc-mm-t9ljLd .grvsc-t9ljLd-1 { color: #6688CC; }\n    .grvsc-mm-t9ljLd .grvsc-t9ljLd-3 { color: #384887; }\n    .grvsc-mm-t9ljLd .grvsc-t9ljLd-7 { color: #225588; }\n    .grvsc-mm-t9ljLd .grvsc-line-highlighted::before {\n      background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n      box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n    }\n  }\n</style>",
            "url": "https://redalemeden.com/blog/2022/ditching-docker-desktop-apple-silicon",
            "title": "Ditching Docker Desktop on Apple Silicon",
            "date_modified": "2022-05-02T23:18:00.000Z",
            "date_published": "2022-05-02T23:18:00.000Z",
            "author": {
                "name": "Reda Lemeden",
                "url": "https://redalemeden.com"
            }
        },
        {
            "id": "https://redalemeden.com/blog/2022/static-blog-svelte-part-1",
            "content_html": "<p><em><strong>Assumed audience</strong>: Web and front-end developers or people interested in the topic. <a href=\"https://redalemeden.com/microblog/post-1570576215962\">What's this?</a></em></p><p>For the first post of 2022, let’s build a static site using Svelte. I previously shared my <a href=\"https://redalemeden.com/blog/2021/picking-up-svelte\">first impressions</a> picking up SvelteKit. Since then, I managed to get closer to a workable static site setup, and today I’d like to share some of my learnings.</p>\n<p>We will continue from where we left off in the previous entry (<a href=\"https://github.com/kaishin/svelte-starter/commit/e108b31282d128e79743b3d2abbad9a27224d6e0\">commit</a>). For starters, writing plain HTML is no fun—I know exactly one person who still does that, and I wish them all the best in the world. But that’s not something I would let my friends do. Markdown is much nicer, so my first attempt was to find a JavaScript markdown parser (like <a href=\"https://github.com/markdown-it/markdown-it\">markdown-it</a>), add it to the project, then write some bundler logic to transform any <code>.md</code> file into HTML.</p>\n<p>But that’s too much hassle; I’ve been too spoiled by <a href=\"https://mdxjs.com\">mdx.js</a> in React-land, and I wanted to find something similar for Svelte. It didn’t take me long to come across exactly what I was looking for: <a href=\"https://mdsvex.com\">mdsvex</a>.</p>\n<p>I know, naming things in the JS ecosystem got quite out of hand, but both of these libraries allow you to write markdown alongside scripts, components, and other modern JS goodies. On paper this would upset every purist I know—and I know quite a lot of them!—but in practice it means I can start with plain markdown and add inline interactive bits and pieces whenever I need to, without having to rewrite the entire page in HTML first.</p>\n<p>Let’s start by adding the <em>mdsvex</em> dependency. It might sound like an antibiotic, but you can add it just like any other <code>npm</code> library!</p>\n<pre class=\"grvsc-container noctis-lux grvsc-ps-tCqlaq grvsc-mm-t9ljLd grvsc-ps-t9ljLd\" data-language=\"sh\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">pnpm add -D mdsvex </span><span class=\"grvsc-tCqlaq-3 grvsc-tCqlaq-i grvsc-t9ljLd-3\"># or equivalent in npm, yarn etc.</span></span></span></code></pre>\n<p>Notice that I added it as a dev dependency using the <code>-D</code> flag; that’s because SvelteKit generates pages that don’t have any runtime dependencies, even when they are dynamic.</p>\n<p>Next, I created a new markdown file in <code>routes</code>, and called it <code>about.md</code>:</p>\n<pre class=\"grvsc-container noctis-lux grvsc-ps-tCqlaq grvsc-mm-t9ljLd grvsc-ps-t9ljLd\" data-language=\"md\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-12 grvsc-tCqlaq-b grvsc-t9ljLd-1\"># About</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">This is my personal blog made using Svelte and SvelteKit.</span></span></span></code></pre>\n<p>When I ran <code>pnpm run dev</code> command and navigated to <code>localhost:3000/about</code>, I got this error:</p>\n<pre class=\"grvsc-container noctis-lux grvsc-ps-tCqlaq grvsc-mm-t9ljLd grvsc-ps-t9ljLd\" data-language=\"\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">Error: Parse failure: Unexpected token (1:0)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Contents of line 1: # About</span></span></code></pre>\n<p>That’s because I don’t read documentation. Ok I usually do, but the <code>mdsvex</code> website had no mention of <code>SvelteKit</code>. This kind of puzzle piece matching in the front-end tooling ecosystem is pervasive, and some things never change.</p>\n<p>I took a step back and read the Svelte CLI configuration <a href=\"https://wmzy.github.io/svelte-cli/config/#global-cli-config\">reference</a>, but didn’t find any mention of file extensions. Then it dawned on me that SvelteKit might have a completely different configuration syntax, which I confirmed by searching for “extension” in the docs. And <a href=\"https://kit.svelte.dev/docs#configuration\">there it was</a>. A beginner’s mistake, but how could I have known?</p>\n<p>Back to the error. I added the <code>.md</code> extension to the config file, <code>svelte.config.js</code>, then restarted the server.</p>\n<pre class=\"grvsc-container noctis-lux grvsc-ps-tCqlaq grvsc-mm-t9ljLd grvsc-ps-t9ljLd\" data-language=\"typescript\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-10 grvsc-t9ljLd-15 grvsc-t9ljLd-i\">const</span><span class=\"grvsc-tCqlaq-1 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-4 grvsc-t9ljLd-1\">config</span><span class=\"grvsc-tCqlaq-1 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-12 grvsc-tCqlaq-b grvsc-t9ljLd-7\">=</span><span class=\"grvsc-tCqlaq-1 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-1 grvsc-t9ljLd-1\">\textensions</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">:</span><span class=\"grvsc-tCqlaq-1 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">[</span><span class=\"grvsc-tCqlaq-9 grvsc-t9ljLd-11\">&quot;.svelte&quot;</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">,</span><span class=\"grvsc-tCqlaq-1 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-9 grvsc-t9ljLd-11\">&quot;.md&quot;</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">\t</span><span class=\"grvsc-tCqlaq-3 grvsc-tCqlaq-i grvsc-t9ljLd-3\">// Consult https://github.com/sveltejs/svelte-preprocess</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">\t</span><span class=\"grvsc-tCqlaq-3 grvsc-tCqlaq-i grvsc-t9ljLd-3\">// …</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">};</span></span></span></code></pre>\n<p>Visiting the <code>/about</code> page in the browser produced no error this time…but no HTML either. The page shows <code># About This is my personal blog made using Svelte and SvelteKit.</code> as plain text. What gives?</p>\n<p><em>Few minutes later</em>…</p>\n<p>Sparing you the painful details this time around, I realized that adding <code>mdsvex</code> as a <em>processor</em> was required for the markdown to be properly parsed. To do that I had to import it at the top of the config file:</p>\n<pre class=\"grvsc-container noctis-lux grvsc-ps-tCqlaq grvsc-mm-t9ljLd grvsc-ps-t9ljLd\" data-language=\"js\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-12 grvsc-tCqlaq-i grvsc-t9ljLd-7\">import</span><span class=\"grvsc-tCqlaq-1 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">{</span><span class=\"grvsc-tCqlaq-1 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">mdsvex</span><span class=\"grvsc-tCqlaq-1 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">}</span><span class=\"grvsc-tCqlaq-1 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-12 grvsc-tCqlaq-i grvsc-t9ljLd-7\">from</span><span class=\"grvsc-tCqlaq-1 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-9 grvsc-t9ljLd-11\">&quot;mdsvex&quot;</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">;</span></span></span></code></pre>\n<p>Then add this bit:</p>\n<pre class=\"grvsc-container noctis-lux grvsc-ps-tCqlaq grvsc-mm-t9ljLd grvsc-ps-t9ljLd\" data-language=\"diff\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-1 grvsc-t9ljLd-1\">extensions: [&quot;.svelte&quot;, &quot;.md&quot;],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-1 grvsc-t9ljLd-1\">// Consult https://github.com/sveltejs/svelte-preprocess</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-1 grvsc-t9ljLd-1\">// for more information about preprocessors</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-13 grvsc-tCqlaq-b grvsc-t9ljLd-16\">+</span><span class=\"grvsc-tCqlaq-9 grvsc-t9ljLd-16\"> preprocess: [preprocess({}), mdsvex({ extensions: [&quot;.md&quot;]})],</span></span></span></code></pre>\n<p>This line tells SvelteKit to use the default preprocessor, but also <code>mdsvex</code> for markdown files. Notice that <code>\".md\"</code> needs to be specified in both spots, otherwise parsing would fail.</p>\n<p>After restarting the server once more, our <code>/about</code> page is live in its full HTML glory!</p>\n<p><img src=\"/static/ca3179a96cf7331165b598c97a2c10ca/page-preview.jpg\" alt=\"About page preview 1\"></p>\n<p>Thanks to SvelteKit’s file based routing, anything added to the <code>/routes</code> folder ends up generating a stand-alone page. You can read more about SvelteKit routing <a href=\"https://kit.svelte.dev/docs#routing\">here</a>.</p>\n<p>Since this is not strict markdown, we can have some fun! For instance we can add styles that only apply to the <em>about</em> page.</p>\n<pre class=\"grvsc-container noctis-lux grvsc-ps-tCqlaq grvsc-mm-t9ljLd grvsc-ps-t9ljLd\" data-language=\"md\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-12 grvsc-tCqlaq-b grvsc-t9ljLd-1\"># About</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">This is my </span><span class=\"grvsc-tCqlaq-10 grvsc-tCqlaq-b grvsc-t9ljLd-11\">**personal blog**</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\"> made using Svelte and SvelteKit.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-3 grvsc-t9ljLd-1\">&lt;</span><span class=\"grvsc-tCqlaq-10 grvsc-t9ljLd-7\">style</span><span class=\"grvsc-tCqlaq-3 grvsc-t9ljLd-1\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">  </span><span class=\"grvsc-tCqlaq-10 grvsc-t9ljLd-7\">strong</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">    </span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-15 grvsc-t9ljLd-i\">background-color</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">: </span><span class=\"grvsc-tCqlaq-9 grvsc-t9ljLd-15\">yellow</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-3 grvsc-t9ljLd-1\">&lt;/</span><span class=\"grvsc-tCqlaq-10 grvsc-t9ljLd-7\">style</span><span class=\"grvsc-tCqlaq-3 grvsc-t9ljLd-1\">&gt;</span></span></span></code></pre>\n<p>And bam!</p>\n<p><img src=\"/static/a4e175feda1f20b9ca4752ab8a8946fd/page-preview-highlight.jpg\" alt=\"About page preview 2\"></p>\n<p>I don’t know about you, but I appreciate having the ability to break the mold, so to speak, when I need to.</p>\n<p>So far I only managed to get one page to render, but what if I want to render an entire folder of markdown posts using a template? That’s what we will look at in the next part of this series! Until then, you can find the changes above in this <a href=\"https://github.com/kaishin/svelte-starter/commit/38ceedf4d5c6c0740a3d4479a1f9662bad7fe867\">commit</a>.</p>\n<p>Stay curious, stay safe!</p>\n<style class=\"grvsc-styles\">\n  \n  .noctis-lux {\n    background-color: #fef8ec;\n    color: #005661;\n  }\n  .noctis-lux .grvsc-tCqlaq-b { font-weight: bold; }\n  .noctis-lux .grvsc-tCqlaq-i { font-style: italic; }\n  .noctis-lux .grvsc-tCqlaq-8 { color: var(--theme-link-color); }\n  .noctis-lux .grvsc-tCqlaq-3 { color: #8CA6A6; }\n  .noctis-lux .grvsc-tCqlaq-12 { color: #FF5792; }\n  .noctis-lux .grvsc-tCqlaq-6 { color: #004D57; }\n  .noctis-lux .grvsc-tCqlaq-10 { color: #E64100; }\n  .noctis-lux .grvsc-tCqlaq-1 { color: #005661; }\n  .noctis-lux .grvsc-tCqlaq-4 { color: #A88C00; }\n  .noctis-lux .grvsc-tCqlaq-9 { color: #00B368; }\n  .noctis-lux .grvsc-tCqlaq-13 { color: #B3694D; }\n  .noctis-lux .grvsc-tCqlaq-14 { color: #0095A8; }\n  .noctis-lux .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(0, 0, 0, 0.05));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(0, 0, 0, 0.2));\n  }\n  body.light-theme .grvsc-ps-tCqlaq {\n    background-color: #fef8ec;\n    color: #005661;\n  }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-tCqlaq-b { font-weight: bold; }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-tCqlaq-i { font-style: italic; }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-tCqlaq-8 { color: var(--theme-link-color); }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-tCqlaq-3 { color: #8CA6A6; }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-tCqlaq-12 { color: #FF5792; }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-tCqlaq-6 { color: #004D57; }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-tCqlaq-10 { color: #E64100; }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-tCqlaq-1 { color: #005661; }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-tCqlaq-4 { color: #A88C00; }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-tCqlaq-9 { color: #00B368; }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-tCqlaq-13 { color: #B3694D; }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-tCqlaq-14 { color: #0095A8; }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(0, 0, 0, 0.05));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(0, 0, 0, 0.2));\n  }\n  body.dark-theme .grvsc-ps-t9ljLd { background-color: #000c18; }\n  body.dark-theme .grvsc-ps-t9ljLd .grvsc-t9ljLd-i { font-style: italic; }\n  body.dark-theme .grvsc-ps-t9ljLd .grvsc-t9ljLd-1 { color: #6688CC; }\n  body.dark-theme .grvsc-ps-t9ljLd .grvsc-t9ljLd-3 { color: #384887; }\n  body.dark-theme .grvsc-ps-t9ljLd .grvsc-t9ljLd-15 { color: #9966B8; }\n  body.dark-theme .grvsc-ps-t9ljLd .grvsc-t9ljLd-7 { color: #225588; }\n  body.dark-theme .grvsc-ps-t9ljLd .grvsc-t9ljLd-11 { color: #22AA44; }\n  body.dark-theme .grvsc-ps-t9ljLd .grvsc-t9ljLd-16 { color: #219186; }\n  body.dark-theme .grvsc-ps-t9ljLd .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n  \n  /* Abyss */\n  @media (prefers-color-scheme: dark) {\n    .grvsc-mm-t9ljLd { background-color: #000c18; }\n    .grvsc-mm-t9ljLd .grvsc-t9ljLd-i { font-style: italic; }\n    .grvsc-mm-t9ljLd .grvsc-t9ljLd-1 { color: #6688CC; }\n    .grvsc-mm-t9ljLd .grvsc-t9ljLd-3 { color: #384887; }\n    .grvsc-mm-t9ljLd .grvsc-t9ljLd-15 { color: #9966B8; }\n    .grvsc-mm-t9ljLd .grvsc-t9ljLd-7 { color: #225588; }\n    .grvsc-mm-t9ljLd .grvsc-t9ljLd-11 { color: #22AA44; }\n    .grvsc-mm-t9ljLd .grvsc-t9ljLd-16 { color: #219186; }\n    .grvsc-mm-t9ljLd .grvsc-line-highlighted::before {\n      background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n      box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n    }\n  }\n</style>",
            "url": "https://redalemeden.com/blog/2022/static-blog-svelte-part-1",
            "title": "Making A Static Blog with Svelte: Part 1",
            "date_modified": "2022-01-18T21:14:00.000Z",
            "date_published": "2022-01-18T21:14:00.000Z",
            "author": {
                "name": "Reda Lemeden",
                "url": "https://redalemeden.com"
            }
        },
        {
            "id": "https://redalemeden.com/blog/2021/picking-up-svelte",
            "content_html": "<p><em><strong>Assumed audience</strong>: Web and front-end developers or people interested in the topic. <a href=\"https://redalemeden.com/microblog/post-1570576215962\">What's this?</a></em></p><p>In this latest installment of my static site generation escapades, I will pick up <a href=\"https://svelte.dev\">Svelte</a>, a relatively new Web framework (2016) with an increased focus on developer experience and performance.</p>\n<p><a href=\"https://redalemeden.com/microblog/post-1627249229000\">My dissatisfaction with Gatsby</a> has left me looking for alternatives, including writing my own in Swift—a daunting task given the long list of features I need to support for this website. I also considered <a href=\"https://www.11ty.dev\">Eleventy</a>, <a href=\"https://nextjs.org\">Next.js</a>, <a href=\"https://gohugo.io\">Hugo</a>, and <a href=\"https://gridsome.org\">Gridsome</a>, but none made the right blend of compromises for my use case, nor allowed configuration to remedy that.</p>\n<p>One of the main selling points of Svelte is how it does away with the virtual DOM approach popularized by <em>React.js</em>. Instead, the framework generates vanilla JavaScript during build time, which in turn directly manipulates the DOM as the application state changes on the client. This means that your production code will be depedency-free and will have a smaller resource footprint as a result.</p>\n<p>I previously hadn’t considered Svelte for static site generation, but <a href=\"https://kit.svelte.dev/docs\">SvelteKit</a> changed that. SvelteKit is the official Svelte application framework and comes with support for all kinds of rendering <del>acronyms</del> approaches, and in any combination within the same app: <em>server-side rendering</em> (SSR), <em>static site generation</em> (SSG), and <em>client-side rendering</em> (CSR). My guess is that if it ends up working out for SSG, there is a high chance I will come back to it for other projects that require SSR or CSR.</p>\n<h2 id=\"hands-on-with-svelte\" style=\"position:relative;\"><a href=\"#hands-on-with-svelte\" aria-label=\"hands on with svelte permalink\" class=\"anchor before\"># </a>Hands-on with Svelte</h2>\n<p>So to kick things off, I started out with the <a href=\"https://kit.svelte.dev/docs#introduction-getting-started\">official guide</a>. It’s quite broad and largely irrelevant for static site generation, but gives a good overview of how Svelte is different from the rest. Next I tried to go through the sections that ar emore relevant to the task at hand, namely the <a href=\"https://kit.svelte.dev/docs#appendix-ssg\">SSG</a> and <a href=\"https://kit.svelte.dev/docs#adapters-supported-environments-static-sites\">Static sites</a> sections. That in turn took me to the <a href=\"https://kit.svelte.dev/docs#adapters\">adapters</a> guide where I learned more about <code>adapter-static</code> and how it can make SvelteKit more tailored for static site generation.</p>\n<p>While going through all these guides, I was pleasantly surprised to learn that both <a href=\"https://kit.svelte.dev/docs#ssr-and-javascript-router\"><em>routing</em></a> and <a href=\"https://kit.svelte.dev/docs#ssr-and-javascript-hydrate\"><em>hydration</em></a> are optional and can be turned off, effectively removing all JS from the final output; a basic amenity the Gatsby team <a href=\"https://github.com/gatsbyjs/gatsby/issues/962#issuecomment-301392995\">refuses</a> to provide, leaving developers no choice but to come up with <a href=\"https://ricard.dev/how-to-remove-client-side-javascript-from-gatsby/\">all sorts of hacks</a>. Better yet, Svelte allows for these decisions to be made on a per-page basis, giving the developer full control over where and when to use these features.</p>\n<p>After this brief documentation survey, I felt like it’s time to get my feet wet. I started by generating a blank app using the command borrowed from the <a href=\"https://kit.svelte.dev/docs#introduction-getting-started\">Getting Started</a> section:</p>\n<pre class=\"grvsc-container noctis-lux grvsc-ps-tCqlaq grvsc-mm-t9ljLd grvsc-ps-t9ljLd\" data-language=\"sh\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">pnpm init svelte@next my-app</span></span></span></code></pre>\n<p>Note that I am using <code>pnpm</code> instead of <code>npm</code> (more on the motivations in <a href=\"https://pnpm.io/motivation\">their own words</a>). I encountered issues with it when used alongside React and Gatsby, but I am more than willing to give it another go with Svelte as part of this evaluation.</p>\n<p>After I answered some setup wizard questions, I ran <code>pnpm run dev -- --open</code> to preview the output and make sure everything is fine and dandy. The next logical step for this evaluation was to try the syntax for disabling both hydration and routing as mentioned earlier—and it turns out it’s rather straightforward:</p>\n<pre class=\"grvsc-container noctis-lux grvsc-ps-tCqlaq grvsc-mm-t9ljLd grvsc-ps-t9ljLd\" data-language=\"html\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-3 grvsc-tCqlaq-i grvsc-t9ljLd-3\">&lt;!-- In index.svelte --&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-3 grvsc-t9ljLd-1\">&lt;</span><span class=\"grvsc-tCqlaq-10 grvsc-t9ljLd-7\">script</span><span class=\"grvsc-tCqlaq-1 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-4 grvsc-tCqlaq-i grvsc-t9ljLd-6\">context</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">=</span><span class=\"grvsc-tCqlaq-9 grvsc-t9ljLd-11\">&quot;module&quot;</span><span class=\"grvsc-tCqlaq-3 grvsc-t9ljLd-1\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-1 grvsc-t9ljLd-1\">  </span><span class=\"grvsc-tCqlaq-12 grvsc-tCqlaq-i grvsc-t9ljLd-7\">export</span><span class=\"grvsc-tCqlaq-1 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-10 grvsc-t9ljLd-15 grvsc-t9ljLd-i\">const</span><span class=\"grvsc-tCqlaq-1 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-4 grvsc-t9ljLd-1\">hydrate</span><span class=\"grvsc-tCqlaq-1 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-12 grvsc-tCqlaq-b grvsc-t9ljLd-7\">=</span><span class=\"grvsc-tCqlaq-1 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-5 grvsc-t9ljLd-4\">false</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-1 grvsc-t9ljLd-1\">  </span><span class=\"grvsc-tCqlaq-12 grvsc-tCqlaq-i grvsc-t9ljLd-7\">export</span><span class=\"grvsc-tCqlaq-1 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-10 grvsc-t9ljLd-15 grvsc-t9ljLd-i\">const</span><span class=\"grvsc-tCqlaq-1 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-4 grvsc-t9ljLd-1\">router</span><span class=\"grvsc-tCqlaq-1 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-12 grvsc-tCqlaq-b grvsc-t9ljLd-7\">=</span><span class=\"grvsc-tCqlaq-1 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-5 grvsc-t9ljLd-4\">false</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-3 grvsc-t9ljLd-1\">&lt;/</span><span class=\"grvsc-tCqlaq-10 grvsc-t9ljLd-7\">script</span><span class=\"grvsc-tCqlaq-3 grvsc-t9ljLd-1\">&gt;</span></span></span></code></pre>\n<p>I then proceeded to swap the <code>@sveltejs/adapter-auto</code> in <code>devDependencies</code> with <code>@sveltejs/adapter-static</code> then ran <code>pnpm install</code> again. I also needed to update this line in <code>svelte.config.js</code>:</p>\n<pre class=\"grvsc-container noctis-lux grvsc-ps-tCqlaq grvsc-mm-t9ljLd grvsc-ps-t9ljLd\" data-language=\"diff\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-13 grvsc-tCqlaq-b grvsc-t9ljLd-14\">-</span><span class=\"grvsc-tCqlaq-10 grvsc-t9ljLd-14\"> import adapter from &#39;@sveltejs/adapter-auto&#39;;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-13 grvsc-tCqlaq-b grvsc-t9ljLd-16\">+</span><span class=\"grvsc-tCqlaq-9 grvsc-t9ljLd-16\"> import adapter from &#39;@sveltejs/adapter-static&#39;;</span></span></span></code></pre>\n<p>After making these changes, I ran <code>pnpm run build</code> and checked the <code>build/index.html</code> file to ensure that it doesn’t import any JavaScript, which it didn’t. The HTML output looked like this—omitting the <code>head</code> and the top <code>div</code>:</p>\n<pre class=\"grvsc-container noctis-lux grvsc-ps-tCqlaq grvsc-mm-t9ljLd grvsc-ps-t9ljLd\" data-language=\"html\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-3 grvsc-t9ljLd-1\">&lt;</span><span class=\"grvsc-tCqlaq-10 grvsc-t9ljLd-7\">main</span><span class=\"grvsc-tCqlaq-1 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-4 grvsc-tCqlaq-i grvsc-t9ljLd-6\">class</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">=</span><span class=\"grvsc-tCqlaq-9 grvsc-t9ljLd-11\">&quot;svelte-g04a0w&quot;</span><span class=\"grvsc-tCqlaq-3 grvsc-t9ljLd-1\">&gt;&lt;</span><span class=\"grvsc-tCqlaq-10 grvsc-t9ljLd-7\">div</span><span class=\"grvsc-tCqlaq-1 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-4 grvsc-tCqlaq-i grvsc-t9ljLd-6\">class</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">=</span><span class=\"grvsc-tCqlaq-9 grvsc-t9ljLd-11\">&quot;container svelte-g04a0w&quot;</span><span class=\"grvsc-tCqlaq-3 grvsc-t9ljLd-1\">&gt;&lt;</span><span class=\"grvsc-tCqlaq-10 grvsc-t9ljLd-7\">h1</span><span class=\"grvsc-tCqlaq-1 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-4 grvsc-tCqlaq-i grvsc-t9ljLd-6\">class</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">=</span><span class=\"grvsc-tCqlaq-9 grvsc-t9ljLd-11\">&quot;svelte-g04a0w&quot;</span><span class=\"grvsc-tCqlaq-3 grvsc-t9ljLd-1\">&gt;</span><span class=\"grvsc-tCqlaq-1 grvsc-t9ljLd-1\">Homepage</span><span class=\"grvsc-tCqlaq-3 grvsc-t9ljLd-1\">&lt;/</span><span class=\"grvsc-tCqlaq-10 grvsc-t9ljLd-7\">h1</span><span class=\"grvsc-tCqlaq-3 grvsc-t9ljLd-1\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-1 grvsc-t9ljLd-1\">    </span><span class=\"grvsc-tCqlaq-3 grvsc-t9ljLd-1\">&lt;</span><span class=\"grvsc-tCqlaq-10 grvsc-t9ljLd-7\">hr</span><span class=\"grvsc-tCqlaq-1 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-4 grvsc-tCqlaq-i grvsc-t9ljLd-6\">class</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">=</span><span class=\"grvsc-tCqlaq-9 grvsc-t9ljLd-11\">&quot;svelte-g04a0w&quot;</span><span class=\"grvsc-tCqlaq-3 grvsc-t9ljLd-1\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-1 grvsc-t9ljLd-1\">    </span><span class=\"grvsc-tCqlaq-3 grvsc-t9ljLd-1\">&lt;</span><span class=\"grvsc-tCqlaq-10 grvsc-t9ljLd-7\">p</span><span class=\"grvsc-tCqlaq-1 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-4 grvsc-tCqlaq-i grvsc-t9ljLd-6\">class</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">=</span><span class=\"grvsc-tCqlaq-9 grvsc-t9ljLd-11\">&quot;svelte-g04a0w&quot;</span><span class=\"grvsc-tCqlaq-3 grvsc-t9ljLd-1\">&gt;</span><span class=\"grvsc-tCqlaq-1 grvsc-t9ljLd-1\">This is my new SvelteKit app.</span><span class=\"grvsc-tCqlaq-3 grvsc-t9ljLd-1\">&lt;/</span><span class=\"grvsc-tCqlaq-10 grvsc-t9ljLd-7\">p</span><span class=\"grvsc-tCqlaq-3 grvsc-t9ljLd-1\">&gt;&lt;/</span><span class=\"grvsc-tCqlaq-10 grvsc-t9ljLd-7\">div</span><span class=\"grvsc-tCqlaq-3 grvsc-t9ljLd-1\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-3 grvsc-t9ljLd-1\">&lt;/</span><span class=\"grvsc-tCqlaq-10 grvsc-t9ljLd-7\">main</span><span class=\"grvsc-tCqlaq-3 grvsc-t9ljLd-1\">&gt;</span></span></span></code></pre>\n<p>If you’re like me, the <code>svelte-g04a0w</code> class littering the markup would have certainly grabbed your attention. This is a common approach in modern front-end tooling to ensure that styling remains scoped to a single page-component, but I still largely prefer to work with good ol’ fashioned global CSS when it comes to static websites.</p>\n<pre class=\"grvsc-container noctis-lux grvsc-ps-tCqlaq grvsc-mm-t9ljLd grvsc-ps-t9ljLd\" data-language=\"html\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-3 grvsc-tCqlaq-i grvsc-t9ljLd-3\">&lt;!-- In index.svelte --&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-3 grvsc-t9ljLd-1\">&lt;</span><span class=\"grvsc-tCqlaq-10 grvsc-t9ljLd-7\">style</span><span class=\"grvsc-tCqlaq-3 grvsc-t9ljLd-1\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-1 grvsc-t9ljLd-1\">  </span><span class=\"grvsc-tCqlaq-10 grvsc-t9ljLd-7\">main</span><span class=\"grvsc-tCqlaq-1 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-1 grvsc-t9ljLd-1\">    </span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-15 grvsc-t9ljLd-i\">font-family</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">:</span><span class=\"grvsc-tCqlaq-1 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-9 grvsc-t9ljLd-15\">sans-serif</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-1 grvsc-t9ljLd-1\">  </span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-3 grvsc-t9ljLd-1\">&lt;/</span><span class=\"grvsc-tCqlaq-10 grvsc-t9ljLd-7\">style</span><span class=\"grvsc-tCqlaq-3 grvsc-t9ljLd-1\">&gt;</span></span></span></code></pre>\n<p>Removing this <code>style</code> block in <code>index.svelte</code> and re-running <code>pnpm run build</code> gets rid of these scope classes altogether in the final output. Also starting with Svelte <em>v3.34.0</em> it looks like you can modify the class naming convention though the <code>cssHash</code> <a href=\"https://svelte.dev/docs#compile-time-svelte-compile\">svelte.compile option</a> if you still want to use component-scoped CSS.</p>\n<p>After this spike, I spent another 10 minutes following <a href=\"https://svelte.dev/tutorial/basics\">the tutorial</a>, before stopping half way when I realized that I’m not particularly interested in state or props at this stage.</p>\n<p>And this about wraps up my first foray into Svelte. This brief experience has left me with a very good impression, and I will do my best to share some more about it in the coming weeks!</p>\n<style class=\"grvsc-styles\">\n  \n  .noctis-lux {\n    background-color: #fef8ec;\n    color: #005661;\n  }\n  .noctis-lux .grvsc-tCqlaq-b { font-weight: bold; }\n  .noctis-lux .grvsc-tCqlaq-i { font-style: italic; }\n  .noctis-lux .grvsc-tCqlaq-8 { color: var(--theme-link-color); }\n  .noctis-lux .grvsc-tCqlaq-3 { color: #8CA6A6; }\n  .noctis-lux .grvsc-tCqlaq-10 { color: #E64100; }\n  .noctis-lux .grvsc-tCqlaq-1 { color: #005661; }\n  .noctis-lux .grvsc-tCqlaq-4 { color: #A88C00; }\n  .noctis-lux .grvsc-tCqlaq-6 { color: #004D57; }\n  .noctis-lux .grvsc-tCqlaq-9 { color: #00B368; }\n  .noctis-lux .grvsc-tCqlaq-12 { color: #FF5792; }\n  .noctis-lux .grvsc-tCqlaq-5 { color: #5842FF; }\n  .noctis-lux .grvsc-tCqlaq-13 { color: #B3694D; }\n  .noctis-lux .grvsc-tCqlaq-14 { color: #0095A8; }\n  .noctis-lux .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(0, 0, 0, 0.05));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(0, 0, 0, 0.2));\n  }\n  body.light-theme .grvsc-ps-tCqlaq {\n    background-color: #fef8ec;\n    color: #005661;\n  }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-tCqlaq-b { font-weight: bold; }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-tCqlaq-i { font-style: italic; }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-tCqlaq-8 { color: var(--theme-link-color); }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-tCqlaq-3 { color: #8CA6A6; }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-tCqlaq-10 { color: #E64100; }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-tCqlaq-1 { color: #005661; }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-tCqlaq-4 { color: #A88C00; }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-tCqlaq-6 { color: #004D57; }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-tCqlaq-9 { color: #00B368; }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-tCqlaq-12 { color: #FF5792; }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-tCqlaq-5 { color: #5842FF; }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-tCqlaq-13 { color: #B3694D; }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-tCqlaq-14 { color: #0095A8; }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(0, 0, 0, 0.05));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(0, 0, 0, 0.2));\n  }\n  body.dark-theme .grvsc-ps-t9ljLd { background-color: #000c18; }\n  body.dark-theme .grvsc-ps-t9ljLd .grvsc-t9ljLd-i { font-style: italic; }\n  body.dark-theme .grvsc-ps-t9ljLd .grvsc-t9ljLd-1 { color: #6688CC; }\n  body.dark-theme .grvsc-ps-t9ljLd .grvsc-t9ljLd-3 { color: #384887; }\n  body.dark-theme .grvsc-ps-t9ljLd .grvsc-t9ljLd-7 { color: #225588; }\n  body.dark-theme .grvsc-ps-t9ljLd .grvsc-t9ljLd-6 { color: #DDBB88; }\n  body.dark-theme .grvsc-ps-t9ljLd .grvsc-t9ljLd-11 { color: #22AA44; }\n  body.dark-theme .grvsc-ps-t9ljLd .grvsc-t9ljLd-15 { color: #9966B8; }\n  body.dark-theme .grvsc-ps-t9ljLd .grvsc-t9ljLd-4 { color: #F280D0; }\n  body.dark-theme .grvsc-ps-t9ljLd .grvsc-t9ljLd-14 { color: #DC322F; }\n  body.dark-theme .grvsc-ps-t9ljLd .grvsc-t9ljLd-16 { color: #219186; }\n  body.dark-theme .grvsc-ps-t9ljLd .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n  \n  /* Abyss */\n  @media (prefers-color-scheme: dark) {\n    .grvsc-mm-t9ljLd { background-color: #000c18; }\n    .grvsc-mm-t9ljLd .grvsc-t9ljLd-i { font-style: italic; }\n    .grvsc-mm-t9ljLd .grvsc-t9ljLd-1 { color: #6688CC; }\n    .grvsc-mm-t9ljLd .grvsc-t9ljLd-3 { color: #384887; }\n    .grvsc-mm-t9ljLd .grvsc-t9ljLd-7 { color: #225588; }\n    .grvsc-mm-t9ljLd .grvsc-t9ljLd-6 { color: #DDBB88; }\n    .grvsc-mm-t9ljLd .grvsc-t9ljLd-11 { color: #22AA44; }\n    .grvsc-mm-t9ljLd .grvsc-t9ljLd-15 { color: #9966B8; }\n    .grvsc-mm-t9ljLd .grvsc-t9ljLd-4 { color: #F280D0; }\n    .grvsc-mm-t9ljLd .grvsc-t9ljLd-14 { color: #DC322F; }\n    .grvsc-mm-t9ljLd .grvsc-t9ljLd-16 { color: #219186; }\n    .grvsc-mm-t9ljLd .grvsc-line-highlighted::before {\n      background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n      box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n    }\n  }\n</style>",
            "url": "https://redalemeden.com/blog/2021/picking-up-svelte",
            "title": "Picking up Svelte",
            "date_modified": "2021-12-26T15:04:00.000Z",
            "date_published": "2021-12-26T15:04:00.000Z",
            "author": {
                "name": "Reda Lemeden",
                "url": "https://redalemeden.com"
            }
        },
        {
            "id": "https://redalemeden.com/blog/2021/wwdc-21-day-4-5-session-notes",
            "content_html": "<p><em><strong>Assumed audience</strong>: my future self. Apple platform developers. <a href=\"https://redalemeden.com/microblog/post-1570576215962\">What's this?</a></em></p><p>Things got a bit busy towards the end of the week, so I grouped Thursday and Friday together in this update.</p>\n<ul>\n<li>\n<p><a href=\"https://developer.apple.com/wwdc21/10232\">Meet Shortcuts for macOS</a> I am really impressed but the amount of work that went into introducing Shortcuts for macOS.It even comes with a <abbr title=\"Command Line Interface\">CLI</abbr> for more integration flexibility.</p>\n</li>\n<li>\n<p><a href=\"https://developer.apple.com/wwdc21/10236\">Host and automate your DocC Documentation</a> I have yet to give this a try, but my first impression is that it’s more work than I expected to deploy this remotely.</p>\n</li>\n<li>\n<p><a href=\"https://developer.apple.com/wwdc21/10052\">What’s new in Mac Catalyst</a> I stopped midway because I realized most of it is not immediately useful for me.</p>\n</li>\n<li>\n<p><a href=\"https://developer.apple.com/wwdc21/10254\">Swift concurrency: behind the scenes</a> This was probably my favorite concurrency session so far. Visual timelines are decidedly the only way for me to understand how concurrency primitives work.</p>\n</li>\n<li>\n<p><a href=\"https://developer.apple.com/wwdc21/10221\">Streamline your localized strings</a> Some pretty handy new additions to various localization workflows. The translation visual editor is nifty too.</p>\n</li>\n<li>\n<p><a href=\"https://developer.apple.com/wwdc21/10019\">Discover concurrency in SwiftUI</a> Nice quality of life improvements when using published properties, but this session left me wondering how Combine and the new concurrency tools will coexist in SwiftUI, if at all.</p>\n</li>\n</ul>\n<p>With WWDC officially over, there is still a ton I am planning to go over in the coming weeks, including SF symbols, widgets, and watchOS additions among others.</p>",
            "url": "https://redalemeden.com/blog/2021/wwdc-21-day-4-5-session-notes",
            "title": "WWDC 21: Day 4-5 Session Notes",
            "date_modified": "2021-06-13T18:49:00.000Z",
            "date_published": "2021-06-13T18:49:00.000Z",
            "author": {
                "name": "Reda Lemeden",
                "url": "https://redalemeden.com"
            }
        },
        {
            "id": "https://redalemeden.com/blog/2021/wwdc-21-day-3-session-notes",
            "content_html": "<p><em><strong>Assumed audience</strong>: my future self. Apple platform developers. <a href=\"https://redalemeden.com/microblog/post-1570576215962\">What's this?</a></em></p><p>We’re half way already! Today I mostly watched concurrency sessions, with some SwiftUI bouts here and there.</p>\n<ul>\n<li>\n<p><a href=\"https://developer.apple.com/wwdc21/10085\">Apple’s privacy pillars in focus</a>: The deeper dive into how private relay works in iCloud+ was quite fascinating.</p>\n</li>\n<li>\n<p><a href=\"https://developer.apple.com/wwdc21/10176\">Craft search experiences in SwiftUI</a>: Pretty impressive how little code is needed to achieve a platform-native search experience on all Apple platforms. If this is the future of the framework, sign me up!</p>\n</li>\n<li>\n<p><a href=\"https://developer.apple.com/wwdc21/10022\">Demystify SwiftUI</a>: Really informative session about SwiftUI view identity and lifetime. It also introduces new terminology—such as “inert modifier”—that will come in handy when discussing these topics.</p>\n</li>\n<li>\n<p><a href=\"https://developer.apple.com/wwdc21/10058\">Meet AsyncSequence</a>: A short and sweet session about <code>AsyncSequence</code>. I was wondering how this fits with Combine, especially given the lack of updates on that front, but unfortunately this didn’t shed any light on that.</p>\n</li>\n<li>\n<p><a href=\"https://developer.apple.com/wwdc21/10134\">Explore structured concurrency in Swift</a>: This session had my favorite slide in the conference so far in terms of information density.</p>\n</li>\n</ul>\n<p><img src=\"/static/731de751edbe43af22a8816615f0aab2/flavors-of-tasks.png\" alt=\"Flavors of Tasks\"></p>\n<ul>\n<li>\n<p><a href=\"https://developer.apple.com/wwdc21/10267\">Meet Xcode Cloud</a>: Built-in continuous integration in Xcode is long overdue, and I am eager to try this out.</p>\n</li>\n<li>\n<p><a href=\"https://developer.apple.com/wwdc21/10133\">Protect mutable state with Swift actors - WWDC 2021 - Videos - Apple Developer</a>: At this point it’s probably clear that concurrency is topping my list of interests this year. This one focuses on <em>actors</em>, which make working with synchronized data access much easier.</p>\n</li>\n</ul>",
            "url": "https://redalemeden.com/blog/2021/wwdc-21-day-3-session-notes",
            "title": "WWDC 21: Day 3 Session Notes",
            "date_modified": "2021-06-09T22:08:00.000Z",
            "date_published": "2021-06-09T22:08:00.000Z",
            "author": {
                "name": "Reda Lemeden",
                "url": "https://redalemeden.com"
            }
        },
        {
            "id": "https://redalemeden.com/blog/2021/wwdc-21-day-2-session-notes",
            "content_html": "<p><em><strong>Assumed audience</strong>: my future self. Apple platform developers. <a href=\"https://redalemeden.com/microblog/post-1570576215962\">What's this?</a></em></p><p>WWDC is finally here! Since I won’t manage to post daily takes this year, I thought I’d jot down the sessions I watched along with a key takeaway for each. The sessions below are listed in the order I have watched them:</p>\n<ul>\n<li>\n<p><a href=\"https://developer.apple.com/wwdc21/10192\">What’s New in SwiftUI</a>: I’m really excited about the new modifiers for list, which felt a bit abandoned last year. I hope later betas introduce some APIs to read the content offset of <code>ScrollView</code>; I need this frequently and I am not happy with the current workarounds.</p>\n</li>\n<li>\n<p><a href=\"https://developer.apple.com/wwdc21/10109\">What’s new in Foundation</a>: The new attributed string and formatter APIs are simply brilliant. Kudos.</p>\n</li>\n<li>\n<p><a href=\"https://developer.apple.com/wwdc21/10021\">Add rich graphics to your SwiftUI app</a>: While I sort of expected the addition of  <code>Material</code>, <code>Canvas</code> caught me off-guard and I am loving it. 😍</p>\n</li>\n<li>\n<p><a href=\"https://developer.apple.com/wwdc21/10166\">Meet DocC Documentation in Xcode</a>: Hands-down my favorite new surprise announcement this year. Lots of neat little details—such as autocomplete symbol links for cross-referencing—and the project is slated to go open-source later this year! 💪</p>\n</li>\n<li>\n<p><a href=\"https://developer.apple.com/wwdc21/10192\">What’s new in Swift</a>: Really loved this session, especially the shoutouts to various efforts from Swift community members.</p>\n</li>\n<li>\n<p><a href=\"https://developer.apple.com/wwdc21/10132\">Meet async/await in Swift</a>: Great starting point to get familiar with async/await and what they bring to the table.</p>\n</li>\n<li>\n<p><a href=\"https://developer.apple.com/wwdc21/10114\">Meet StoreKit 2</a>: I have no idea why I picked up this session, but I don’t regret it! Great to see async/await being already used in the SDK this prominently.</p>\n</li>\n</ul>",
            "url": "https://redalemeden.com/blog/2021/wwdc-21-day-2-session-notes",
            "title": "WWDC 21: Day 2 Session Notes",
            "date_modified": "2021-06-08T23:08:00.000Z",
            "date_published": "2021-06-08T23:08:00.000Z",
            "author": {
                "name": "Reda Lemeden",
                "url": "https://redalemeden.com"
            }
        },
        {
            "id": "https://redalemeden.com/blog/2021/a-feel-good-refactor",
            "content_html": "<p><em><strong>Assumed audience</strong>: Combine developers or people curious about how I spend my Sunday mornings. <a href=\"https://redalemeden.com/microblog/post-1570576215962\">What's this?</a></em></p><p>If you are using Combine’s <code>Just</code>, <code>Fail</code>, or <code>Result.publisher</code> as much as I do to mock publishers for SwiftUI’s previews and tests, chances are you have grown tired of manually setting either the output or the failure types, then erasing to <code>AnyPublisher</code> in every occurrence.</p>\n<p>Today I decided that it was time to honor the rule of three (or <em>thirty eight</em>?) and come up with something better. For one, we can heavily lean on Swift’s <a href=\"https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID322\">type inference</a> to improve the API at the call site. And while we’re at it, we can make it easier to remember by using a similar syntax to handle both success and failure scenarios.</p>\n<p>Since the goal here to create a type-erased publisher that emits either a value or an error then completes, we can call the helper <em>“once”</em>. As for the implementation, we have a couple of options: define a static function on <code>Publisher</code>, or create a custom <code>Publisher</code> type. Since the latter would still require type-erasure at the call site, I chose to go with the former.</p>\n<p>Let’s start with the far more common value-emitting path.</p>\n<pre class=\"grvsc-container noctis-lux grvsc-ps-tCqlaq grvsc-mm-t9ljLd grvsc-ps-t9ljLd\" data-language=\"swift\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-12 grvsc-tCqlaq-i grvsc-t9ljLd-12 grvsc-t9ljLd-i\">public</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-8\"> </span><span class=\"grvsc-tCqlaq-10 grvsc-t9ljLd-10\">extension</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-8\"> </span><span class=\"grvsc-tCqlaq-7 grvsc-t9ljLd-7\">Publisher</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-8\"> </span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-6\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-8\">  </span><span class=\"grvsc-tCqlaq-12 grvsc-tCqlaq-i grvsc-t9ljLd-12 grvsc-t9ljLd-i\">static</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-8\"> </span><span class=\"grvsc-tCqlaq-10 grvsc-t9ljLd-10\">func</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-8\"> </span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-14\">once</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-6\">&lt;</span><span class=\"grvsc-tCqlaq-10 grvsc-tCqlaq-i grvsc-t9ljLd-10 grvsc-t9ljLd-i\">T</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-6\">,</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-8\"> </span><span class=\"grvsc-tCqlaq-10 grvsc-tCqlaq-i grvsc-t9ljLd-10 grvsc-t9ljLd-i\">U</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-6\">:</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-8\"> </span><span class=\"grvsc-tCqlaq-13 grvsc-tCqlaq-i grvsc-t9ljLd-13 grvsc-t9ljLd-i\">Error</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-6\">&gt;</span><span class=\"grvsc-tCqlaq-11 grvsc-t9ljLd-11\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-8\">   </span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-14\">_</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-8\"> </span><span class=\"grvsc-tCqlaq-8 grvsc-tCqlaq-b grvsc-t9ljLd-8 grvsc-t9ljLd-b\">value</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-8\">: T,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-8\">    </span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-14\">failAs</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-8\"> </span><span class=\"grvsc-tCqlaq-8 grvsc-tCqlaq-b grvsc-t9ljLd-8 grvsc-t9ljLd-b\">error</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-8\">: U.</span><span class=\"grvsc-tCqlaq-12 grvsc-tCqlaq-b grvsc-t9ljLd-12 grvsc-t9ljLd-b\">Type</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-8\"> </span><span class=\"grvsc-tCqlaq-3 grvsc-tCqlaq-i grvsc-t9ljLd-3 grvsc-t9ljLd-i\">// 1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-8\">  </span><span class=\"grvsc-tCqlaq-11 grvsc-t9ljLd-11\">)</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-8\"> </span><span class=\"grvsc-tCqlaq-12 grvsc-tCqlaq-b grvsc-t9ljLd-12 grvsc-t9ljLd-b\">-&gt;</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-8\"> AnyPublisher</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-6\">&lt;</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-8\">T, U</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-6\">&gt;</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-8\"> </span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-6\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-8\">    </span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-14\">Just</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-6\">(</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-8\">value</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-6\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-8\">      .</span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-14\">setFailureType</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-6\">(</span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-14\">to</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-6\">:</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-8\"> U.</span><span class=\"grvsc-tCqlaq-12 grvsc-tCqlaq-b grvsc-t9ljLd-12 grvsc-t9ljLd-b\">self</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-6\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-8\">      .</span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-14\">eraseToAnyPublisher</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-6\">()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-8\">  </span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-6\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-6\">}</span></span></span></code></pre>\n<p>This does the job, but having to specify the error type (1) every time takes away some of the <em>feel-goodness</em> of this solution. Luckily, Swift’s type inference comes to the rescue. Time for take 2!</p>\n<pre class=\"grvsc-container noctis-lux grvsc-ps-tCqlaq grvsc-mm-t9ljLd grvsc-ps-t9ljLd\" data-language=\"swift\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-12 grvsc-tCqlaq-i grvsc-t9ljLd-7\">static</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-10 grvsc-t9ljLd-15 grvsc-t9ljLd-i\">func</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-6\">once</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">&lt;</span><span class=\"grvsc-tCqlaq-10 grvsc-tCqlaq-i grvsc-t9ljLd-1\">T</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">,</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-10 grvsc-tCqlaq-i grvsc-t9ljLd-1\">U</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">:</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-13 grvsc-tCqlaq-i grvsc-t9ljLd-15 grvsc-t9ljLd-i\">Error</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">&gt;</span><span class=\"grvsc-tCqlaq-11 grvsc-t9ljLd-1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">  </span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-6\">_</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-8 grvsc-tCqlaq-b grvsc-t9ljLd-19 grvsc-t9ljLd-i\">value</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">: T</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-11 grvsc-t9ljLd-1\">)</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-12 grvsc-tCqlaq-b grvsc-t9ljLd-7\">-&gt;</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> AnyPublisher</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">&lt;</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">T, U</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">&gt;</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">  </span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-15\">Just</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">(</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">value</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">    .</span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-15\">setFailureType</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">(</span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-15\">to</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">:</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> U.</span><span class=\"grvsc-tCqlaq-12 grvsc-tCqlaq-b grvsc-t9ljLd-7\">self</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">    .</span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-15\">eraseToAnyPublisher</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">}</span></span></span></code></pre>\n<p>The type of the return value should be enough to identify the publisher’s failure type. For cases where there isn’t enough type information at the call site, we can keep the first iteration around to avoid the need for explicit types when assigning values—but that’s purely a matter of preference.</p>\n<p>With the happy path case behind us, let’s do the same for the failure-emitting case.</p>\n<pre class=\"grvsc-container noctis-lux grvsc-ps-tCqlaq grvsc-mm-t9ljLd grvsc-ps-t9ljLd\" data-language=\"swift\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-12 grvsc-tCqlaq-i grvsc-t9ljLd-7\">static</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-10 grvsc-t9ljLd-15 grvsc-t9ljLd-i\">func</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-6\">once</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">&lt;</span><span class=\"grvsc-tCqlaq-10 grvsc-tCqlaq-i grvsc-t9ljLd-1\">T</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">,</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-10 grvsc-tCqlaq-i grvsc-t9ljLd-1\">U</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">:</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-13 grvsc-tCqlaq-i grvsc-t9ljLd-15 grvsc-t9ljLd-i\">Error</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">&gt;</span><span class=\"grvsc-tCqlaq-11 grvsc-t9ljLd-1\">(</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> // 1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">  </span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-6\">failing</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-8 grvsc-tCqlaq-b grvsc-t9ljLd-19 grvsc-t9ljLd-i\">error</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">: U </span><span class=\"grvsc-tCqlaq-3 grvsc-tCqlaq-i grvsc-t9ljLd-3\">// 2</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-11 grvsc-t9ljLd-1\">)</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-12 grvsc-tCqlaq-b grvsc-t9ljLd-7\">-&gt;</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> AnyPublisher</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">&lt;</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">T, U</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">&gt;</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">  </span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-15\">Fail</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">    </span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-15\">outputType</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">:</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> T.</span><span class=\"grvsc-tCqlaq-12 grvsc-tCqlaq-b grvsc-t9ljLd-7\">self</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">    </span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-15\">failure</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">:</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> error</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">  </span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">  .</span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-15\">eraseToAnyPublisher</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">}</span></span></span></code></pre>\n<p>I chose to keep the same method name (1) to streamline the API at the call site. Unfortunately this means an additional keyword is needed to help the compiler tell them apart. I went with <code>failing</code> (2) on the spur of the moment, but anything would do the job. If call site uniformity is a non-goal, then using <code>just</code>/<code>fail</code> to match the Combine publishers would be preferable.</p>\n<p>As a parting bonus, we can throw in an additional helper for publishers where the output value is <code>Void</code>; quite common for write operations and <code>PUT</code>/<code>DELETE</code> endpoints.</p>\n<pre class=\"grvsc-container noctis-lux grvsc-ps-tCqlaq grvsc-mm-t9ljLd grvsc-ps-t9ljLd\" data-language=\"swift\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-12 grvsc-tCqlaq-i grvsc-t9ljLd-7\">static</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-10 grvsc-t9ljLd-15 grvsc-t9ljLd-i\">func</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-6\">once</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">&lt;</span><span class=\"grvsc-tCqlaq-10 grvsc-tCqlaq-i grvsc-t9ljLd-1\">U</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">:</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-13 grvsc-tCqlaq-i grvsc-t9ljLd-15 grvsc-t9ljLd-i\">Error</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">&gt;</span><span class=\"grvsc-tCqlaq-11 grvsc-t9ljLd-1\">()</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-12 grvsc-tCqlaq-b grvsc-t9ljLd-7\">-&gt;</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> AnyPublisher</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">&lt;</span><span class=\"grvsc-tCqlaq-13 grvsc-tCqlaq-i grvsc-t9ljLd-15 grvsc-t9ljLd-i\">Void</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">, U</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">&gt;</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">  </span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-15\">once</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">(()</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">, </span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-15\">failAs</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">:</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> U.</span><span class=\"grvsc-tCqlaq-12 grvsc-tCqlaq-b grvsc-t9ljLd-7\">self</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-12 grvsc-tCqlaq-i grvsc-t9ljLd-7\">static</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-10 grvsc-t9ljLd-15 grvsc-t9ljLd-i\">func</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-6\">once</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">&lt;</span><span class=\"grvsc-tCqlaq-10 grvsc-tCqlaq-i grvsc-t9ljLd-1\">U</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">:</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-13 grvsc-tCqlaq-i grvsc-t9ljLd-15 grvsc-t9ljLd-i\">Error</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">&gt;</span><span class=\"grvsc-tCqlaq-11 grvsc-t9ljLd-1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">  </span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-6\">failing</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-8 grvsc-tCqlaq-b grvsc-t9ljLd-19 grvsc-t9ljLd-i\">error</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">: U</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-11 grvsc-t9ljLd-1\">)</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-12 grvsc-tCqlaq-b grvsc-t9ljLd-7\">-&gt;</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> AnyPublisher</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">&lt;</span><span class=\"grvsc-tCqlaq-13 grvsc-tCqlaq-i grvsc-t9ljLd-15 grvsc-t9ljLd-i\">Void</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">, U</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">&gt;</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">  </span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-15\">once</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">(</span><span class=\"grvsc-tCqlaq-13 grvsc-tCqlaq-i grvsc-t9ljLd-15 grvsc-t9ljLd-i\">Void</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">.</span><span class=\"grvsc-tCqlaq-12 grvsc-tCqlaq-b grvsc-t9ljLd-7\">self</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">, </span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-15\">failing</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">:</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> error</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">}</span></span></span></code></pre>\n<p>Armed with these new tools, mocking publishers is now as easy as calling <code>once()</code> and <code>once(failing:)</code> with the value or error respectively.</p>\n<p>Here’s an example from the codebase that prompted me to write this post:</p>\n<pre class=\"grvsc-container noctis-lux grvsc-ps-tCqlaq grvsc-mm-t9ljLd grvsc-ps-t9ljLd\" data-language=\"swift\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-10 grvsc-t9ljLd-7\">let</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> cache </span><span class=\"grvsc-tCqlaq-12 grvsc-tCqlaq-b grvsc-t9ljLd-7\">=</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-15\">Cache</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">  </span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-15\">upsert</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">:</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">{</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> value </span><span class=\"grvsc-tCqlaq-12 grvsc-tCqlaq-b grvsc-t9ljLd-7\">in</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-3 grvsc-tCqlaq-i grvsc-t9ljLd-3\">// -&gt; AnyPublisher&lt;Value, CachingError&gt; </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">    </span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-15\">Just</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">(</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">value</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">      .</span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-15\">setFailureType</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">(</span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-15\">to</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">:</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> CachingError.</span><span class=\"grvsc-tCqlaq-12 grvsc-tCqlaq-b grvsc-t9ljLd-7\">self</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">      .</span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-15\">eraseToAnyPublisher</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">  </span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">}</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">  </span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-15\">deleteOutdated</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">:</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">{</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-3 grvsc-tCqlaq-i grvsc-t9ljLd-3\">// -&gt; AnyPublisher&lt;Int, CachingError&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">    </span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-15\">Just</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">(</span><span class=\"grvsc-tCqlaq-5 grvsc-t9ljLd-4\">2</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">      .</span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-15\">setFailureType</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">(</span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-15\">to</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">:</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> CachingError.</span><span class=\"grvsc-tCqlaq-12 grvsc-tCqlaq-b grvsc-t9ljLd-7\">self</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">      .</span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-15\">eraseToAnyPublisher</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">  </span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">}</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">  </span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-15\">deleteAll</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">:</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">{</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-3 grvsc-tCqlaq-i grvsc-t9ljLd-3\">// -&gt; AnyPublisher&lt;Int, CachingError&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">    </span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-15\">Fail</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">      </span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-15\">outputType</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">:</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-13 grvsc-tCqlaq-i grvsc-t9ljLd-15 grvsc-t9ljLd-i\">Int</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">.</span><span class=\"grvsc-tCqlaq-12 grvsc-tCqlaq-b grvsc-t9ljLd-7\">self</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">      </span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-15\">failure</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">:</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> CachingError.nothingToDelete</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">    </span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">  </span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">)</span></span></span></code></pre>\n<p>And here is the same section after the refactor:</p>\n<pre class=\"grvsc-container noctis-lux grvsc-ps-tCqlaq grvsc-mm-t9ljLd grvsc-ps-t9ljLd\" data-language=\"swift\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-10 grvsc-t9ljLd-7\">let</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> cache </span><span class=\"grvsc-tCqlaq-12 grvsc-tCqlaq-b grvsc-t9ljLd-7\">=</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-15\">Cache</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">  </span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-15\">upsert</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">:</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">{</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> .</span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-15\">once</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">(</span><span class=\"grvsc-tCqlaq-10 grvsc-tCqlaq-i grvsc-t9ljLd-1\">$0</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">)</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">}</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">, </span><span class=\"grvsc-tCqlaq-3 grvsc-tCqlaq-i grvsc-t9ljLd-3\">// (Item) -&gt; AnyPublisher&lt;Value, Error&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">  </span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-15\">deleteOutdated</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">:</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">{</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> .</span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-15\">once</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">(</span><span class=\"grvsc-tCqlaq-5 grvsc-t9ljLd-4\">2</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">)</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">}</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">, </span><span class=\"grvsc-tCqlaq-3 grvsc-tCqlaq-i grvsc-t9ljLd-3\">// () -&gt; AnyPublisher&lt;Int, Error&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\">  </span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-15\">deleteAll</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">:</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">{</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> .</span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-15\">once</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">(</span><span class=\"grvsc-tCqlaq-14 grvsc-t9ljLd-15\">failing</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">:</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> .nothingToDelete</span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">)</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">}</span><span class=\"grvsc-tCqlaq-8 grvsc-t9ljLd-1\"> </span><span class=\"grvsc-tCqlaq-3 grvsc-tCqlaq-i grvsc-t9ljLd-3\">// () -&gt; AnyPublisher&lt;Int, Error&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tCqlaq-6 grvsc-t9ljLd-1\">)</span></span></span></code></pre>\n<p>Now, tell me which scores higher in the <em>feel-good</em> department?</p>\n<style class=\"grvsc-styles\">\n  \n  .noctis-lux {\n    background-color: #fef8ec;\n    color: #005661;\n  }\n  .noctis-lux .grvsc-tCqlaq-b { font-weight: bold; }\n  .noctis-lux .grvsc-tCqlaq-i { font-style: italic; }\n  .noctis-lux .grvsc-tCqlaq-12 { color: #FF5792; }\n  .noctis-lux .grvsc-tCqlaq-8 { color: var(--theme-link-color); }\n  .noctis-lux .grvsc-tCqlaq-10 { color: #E64100; }\n  .noctis-lux .grvsc-tCqlaq-7 { color: #0094F0; }\n  .noctis-lux .grvsc-tCqlaq-6 { color: #004D57; }\n  .noctis-lux .grvsc-tCqlaq-14 { color: #0095A8; }\n  .noctis-lux .grvsc-tCqlaq-13 { color: #B3694D; }\n  .noctis-lux .grvsc-tCqlaq-11 { color: #00BDD6; }\n  .noctis-lux .grvsc-tCqlaq-3 { color: #8CA6A6; }\n  .noctis-lux .grvsc-tCqlaq-5 { color: #5842FF; }\n  .noctis-lux .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(0, 0, 0, 0.05));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(0, 0, 0, 0.2));\n  }\n  body.light-theme .grvsc-ps-tCqlaq {\n    background-color: #fef8ec;\n    color: #005661;\n  }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-tCqlaq-b { font-weight: bold; }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-tCqlaq-i { font-style: italic; }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-tCqlaq-12 { color: #FF5792; }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-tCqlaq-8 { color: var(--theme-link-color); }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-tCqlaq-10 { color: #E64100; }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-tCqlaq-7 { color: #0094F0; }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-tCqlaq-6 { color: #004D57; }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-tCqlaq-14 { color: #0095A8; }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-tCqlaq-13 { color: #B3694D; }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-tCqlaq-11 { color: #00BDD6; }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-tCqlaq-3 { color: #8CA6A6; }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-tCqlaq-5 { color: #5842FF; }\n  body.light-theme .grvsc-ps-tCqlaq .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(0, 0, 0, 0.05));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(0, 0, 0, 0.2));\n  }\n  body.dark-theme .grvsc-ps-t9ljLd { background-color: #000c18; }\n  body.dark-theme .grvsc-ps-t9ljLd .grvsc-t9ljLd-b { font-weight: bold; }\n  body.dark-theme .grvsc-ps-t9ljLd .grvsc-t9ljLd-i { font-style: italic; }\n  body.dark-theme .grvsc-ps-t9ljLd .grvsc-t9ljLd-12 { color: #CB4B16; }\n  body.dark-theme .grvsc-ps-t9ljLd .grvsc-t9ljLd-8 { color: #F8F8F0; }\n  body.dark-theme .grvsc-ps-t9ljLd .grvsc-t9ljLd-10 { color: #AE81FF; }\n  body.dark-theme .grvsc-ps-t9ljLd .grvsc-t9ljLd-7 { color: #225588; }\n  body.dark-theme .grvsc-ps-t9ljLd .grvsc-t9ljLd-6 { color: #DDBB88; }\n  body.dark-theme .grvsc-ps-t9ljLd .grvsc-t9ljLd-14 { color: #DC322F; }\n  body.dark-theme .grvsc-ps-t9ljLd .grvsc-t9ljLd-13 { color: #EEE8D5; }\n  body.dark-theme .grvsc-ps-t9ljLd .grvsc-t9ljLd-11 { color: #22AA44; }\n  body.dark-theme .grvsc-ps-t9ljLd .grvsc-t9ljLd-3 { color: #384887; }\n  body.dark-theme .grvsc-ps-t9ljLd .grvsc-t9ljLd-1 { color: #6688CC; }\n  body.dark-theme .grvsc-ps-t9ljLd .grvsc-t9ljLd-15 { color: #9966B8; }\n  body.dark-theme .grvsc-ps-t9ljLd .grvsc-t9ljLd-19 { color: #2277FF; }\n  body.dark-theme .grvsc-ps-t9ljLd .grvsc-t9ljLd-4 { color: #F280D0; }\n  body.dark-theme .grvsc-ps-t9ljLd .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n  \n  /* Abyss */\n  @media (prefers-color-scheme: dark) {\n    .grvsc-mm-t9ljLd { background-color: #000c18; }\n    .grvsc-mm-t9ljLd .grvsc-t9ljLd-b { font-weight: bold; }\n    .grvsc-mm-t9ljLd .grvsc-t9ljLd-i { font-style: italic; }\n    .grvsc-mm-t9ljLd .grvsc-t9ljLd-12 { color: #CB4B16; }\n    .grvsc-mm-t9ljLd .grvsc-t9ljLd-8 { color: #F8F8F0; }\n    .grvsc-mm-t9ljLd .grvsc-t9ljLd-10 { color: #AE81FF; }\n    .grvsc-mm-t9ljLd .grvsc-t9ljLd-7 { color: #225588; }\n    .grvsc-mm-t9ljLd .grvsc-t9ljLd-6 { color: #DDBB88; }\n    .grvsc-mm-t9ljLd .grvsc-t9ljLd-14 { color: #DC322F; }\n    .grvsc-mm-t9ljLd .grvsc-t9ljLd-13 { color: #EEE8D5; }\n    .grvsc-mm-t9ljLd .grvsc-t9ljLd-11 { color: #22AA44; }\n    .grvsc-mm-t9ljLd .grvsc-t9ljLd-3 { color: #384887; }\n    .grvsc-mm-t9ljLd .grvsc-t9ljLd-1 { color: #6688CC; }\n    .grvsc-mm-t9ljLd .grvsc-t9ljLd-15 { color: #9966B8; }\n    .grvsc-mm-t9ljLd .grvsc-t9ljLd-19 { color: #2277FF; }\n    .grvsc-mm-t9ljLd .grvsc-t9ljLd-4 { color: #F280D0; }\n    .grvsc-mm-t9ljLd .grvsc-line-highlighted::before {\n      background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n      box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n    }\n  }\n</style>",
            "url": "https://redalemeden.com/blog/2021/a-feel-good-refactor",
            "title": "A Feel-Good Refactor",
            "date_modified": "2021-02-21T14:09:00.000Z",
            "date_published": "2021-02-21T14:09:00.000Z",
            "author": {
                "name": "Reda Lemeden",
                "url": "https://redalemeden.com"
            }
        },
        {
            "id": "https://redalemeden.com/blog/2021/the-reshaped-mac-experience",
            "content_html": "<p><em><strong>Assumed audience</strong>: people interested in Apple platforms and UI design. <a href=\"https://redalemeden.com/microblog/post-1570576215962\">What's this?</a></em></p><p>Riccardo Mori <a href=\"http://morrick.me/archives/9150\">writes</a> about a Twitter Thread by Jeff Johnson, where he criticizes the direction Apple took with Big Sur.</p>\n<blockquote>\n<p>[…] the Mac experience today feels disjointed. […] Big Sur embodies what I’ve been fearing in recent years — a progressive iOS-ification of Mac OS.</p>\n</blockquote>\n<p>The so-called <em>iOS-ification</em> is often cited as to why the software we use today on the most powerful hardware we’ve ever had access to is barely more advanced than what we used decades ago. I’d argue that the real reasons go much deeper than that and permeate an entire industry, not just Apple. But let’s leave that for another occasion.</p>\n<blockquote>\n<p>But this loss of differentiation is especially detrimental to Mac OS, which is being reduced to the lowest common denominator and loses an increasing amount of user interface ideas and conventions that were central to its superior user experience and ease of use.</p>\n</blockquote>\n<p>I haven’t been keeping tabs on UI regressions in Big Sur, but this all sounds like hyperbole to me. Especially considering the example the author chose to illustrate the point:</p>\n<blockquote>\n<p>You want an example that I find particularly glaring? Big Sur’s UI features a general increase of space between elements — icons, menus, labels, toolbars, sidebars, pretty much everywhere.</p>\n</blockquote>\n<p>The argument that more space between elements reduces information density is well established. But calling it <em>glaring</em> is nothing short of an overstatement. There is a point beyond which spacing becomes actively harmful in a user interface, but it’s hard to argue that Big Sur crossed that threshold. And I am saying this both as a long time Mac user and as a UI designer.</p>\n<blockquote>\n<p>These are all notes from an external observer, mind you. I don’t have inside information. I don’t know anything about how the Design team works at Apple. I’m just trying to make deductions based on what I’m seeing when I’m using Big Sur compared to all Mac OS versions I used previously and still use along with Big Sur.</p>\n</blockquote>\n<p>I understand that people have different expectations of what a desktop operating system should be, and that Big Sur is by no means regression-free in the the UI department. But this sentence is the crux of what I object to in this piece and others like it; I have a hard time empathizing with the author when all I am presented with are assumptions and opinions disguised as facts.</p>\n<p>Even after all these months, I am still trying to collect my thoughts regarding Big Sur. My current impression is that it has its highs and lows, like every software release ever. Some UI decisions, especially around title bars, might need further adjustments. Some icons need additional pixel hinting. Some elements need better alignment. But quite frankly, none of it stands out enough to completely ruin the experience. When you’re absorbed in a given task, these details mostly stay out of your <a href=\"https://www.usabilityfirst.com/glossary/locus-of-attention/index.html\">locus of attention</a>, until they hinder your task progression—which might or might not happen depending on how much attention you pay and how easily distracted you get.</p>\n<p>At the end of the day, there is absolutely nothing wrong with people sharing their experiences and opinions; I am just ranting about a rant so that I can link people to it when they send me more rants about Big Sur.</p>",
            "url": "https://redalemeden.com/blog/2021/the-reshaped-mac-experience",
            "title": "The Reshaped Mac experience",
            "date_modified": "2021-02-02T19:53:00.000Z",
            "date_published": "2021-02-02T19:53:00.000Z",
            "author": {
                "name": "Reda Lemeden",
                "url": "https://redalemeden.com"
            }
        },
        {
            "id": "https://redalemeden.com/blog/2020/achievement-unlocked-2020",
            "content_html": "<p><em><strong>Assumed audience</strong>: people who have been following my work and/or are interested in independent blogging. <a href=\"https://redalemeden.com/microblog/post-1570576215962\">What's this?</a></em></p><p>As challenging and anomalous as this year has been, I sought to make the best out of the exceptional circumstances that unfolded. In March I quit my full time job to focus on a handful of personal projects—a <a href=\"https://swiftandfika.com/\">conference</a>, a book, and a digital product. While the first was indefinitely postponed due to the pandemic, being confined at home was perfect for the remaining two throughout spring and summer—but more on that hopefully soon. In early fall, I started teaching front-end Web development at <a href=\"https://www.hyperisland.com/programs-and-courses/frontend-developer\">Hyper Island</a>; a unique and rewarding experience that I’m not ready to forget any time soon.</p>\n<p>Another perk of being stuck at home is having the opportunity to try new things. I learned how to make rather average pound cakes and play some rudimentary music on synth. I also played a good dose of competitive Pokémon and Street Fighter V, with the occasional single player game to keep things fresh. On the minus side, I have spent far less time with family and friends and missed most of my swimming sessions.</p>\n<p>When all is said and done, this year was a rare chance for me to reflect and appreciate some of the things I took for granted. Visiting relatives, exercising in the gym, or going to a concert will certainly feel less mundane whenever I can do them without a care in the world again.</p>\n<p>So, 2020, you haven’t been particularly nice, but I am here to bid you farewell. As for you, 2021, I understand  the expectations are high, but you can’t do much worse than your predecessor, <em>can you?</em></p>",
            "url": "https://redalemeden.com/blog/2020/achievement-unlocked-2020",
            "title": "Achievement Unlocked: 2020 Edition",
            "date_modified": "2020-12-31T15:03:00.000Z",
            "date_published": "2020-12-31T15:03:00.000Z",
            "author": {
                "name": "Reda Lemeden",
                "url": "https://redalemeden.com"
            }
        }
    ]
}
